# distro codename: `lsb_release -cs`
ubuntu_release: "jammy"

#
# System tools
#
cfssl_version: "v1.6.2"

#
# Emacs
#

# emacs version (tag or commit) to build from source.
# for example, "emacs-27.1" or "86d8d76aa3"
emacs_rev: "emacs-29.4"
emacs_dir: "/opt/emacs-src"
emacs_compile_flags: "--with-native-compilation"
# source code version of GNU Global to build
gnu_global_version: "6.6.10"
# commit, branch or tag to use for https://github.com/universal-ctags/ctags
universal_ctags_version: "p6.0.20230521.0"

#
# Go
#
go_version: "1.22.4"
go_install_dir: "/opt/go-{{ go_version }}"
go_path: "~/dev/go"
# Debugger for Go
delve_version: "v1.21.0"
# Module version to use for the offifical gopls tool (e.g. "HEAD", a branch
# name, a tag name, or a commit hash).
# Note: if a version fails to install try cleaning up the Go cache:
# go clean -cache ; go clean -modcache
gopls_version: "v0.16.1"
golangci_lint_version: "v1.59.1"
# gRPC
protoc_version: "26.1"
protoc_gen_go_version: "v1.34.0"
protoc_grpc_gen_go_version: "v1.3.0"
# go mod visualization
modgv_version: "v0.2.4"
grpcurl_version: "v1.8.2"
# Swagger/OpenAPI
go_swagger_version: "v0.30.5"
ogen_version: "v1.0.0"
speccy_version: "v0.11.0"
# Go REPL.
gomacro_version: "2ff796e"

#
# JavaScript/NodeJS
#
nodejs_snap_channel: "18" # NodeJS major version
typescript_lsp_server_version: "3.3.0"

#
# Python
#
# python language server
pylsp_version: "v1.9.0"
pyenv_version: "v2.3.35"
# python versions to install in pyenv
pyenv_py_versions: ["2.7.18", "3.11.7"]
# interpreters to set as default, globally
pyenv_global_versions: "3.11.7 2.7.18"
pyenv_virtualenv_version: "v1.1.5"
# debug adapter protocol (DAP) server for python
ptvsd_version: "4.3.2"
pytest_version: "6.2.5"
# miniconda is a minimal installer for conda: a package manager and environment
# management system originally developed for python data scientists.
# See: https://repo.anaconda.com/miniconda/.
miniconda_py_version: "py39"
miniconda_version: "4.10.3"
miniconda_checksum: "sha256:1ea2f885b4dbc3098662845560bc64271eb17085387a70c2ba3f29fff6f8d52f"
markdown_pp_version: "1.5.1"

#
# Ruby
#
# lsp server
solargraph_version: "0.39.15"

#
# Rust
#
ripgrep_version: "13.0.0"
# refined highlighting of changes in git diffs
diffr_version: "0.1.5"

#
# Terraform
#
tf_version: "1.7.5"
tf_install_dir: "/opt/tf-{{ tf_version }}"

#
# Kubernetes
#
kubectl_version: "1.30.1"
helm_version: "3.15.2"
helm_install_dir: "/opt/helm-{{ helm_version }}"
helm_secrets_version: "v4.6.0"
helm_diff_version: "3.5.0"
sops_version: "v3.7.3"
minikube_version: "1.13.0"
# kind: kubernetes-in-docker
kind_version: "v0.23.0"
kustomize_version: "3.3.0"
helmfile_version: "0.162.0"
k9s_version: "v0.32.3"
k9s_install_dir: "/opt/bin"

# telepresence: develop with laptop "inside" kubernetes cluster
telepresence_v1_tag: "0.109"
telepresence_v2_version: "2.13.3"
# use a different name for binary until it's possible to swap from v1 (installed
# via apt) to v2. See #1646 and #1608.
telepresence_v2_bin: "telepresence2"

# tinyproxy tag/commit to build
tinyproxy_version: "17e19a67cfd2af4d05d50981d3a09a46bec684ac"

#
# folder encryption
#
# be careful updating this. check the changelog to see if it risks breaking
# any encrypted folders in use.
fscrypt_version: "v0.3.0"
fscrypt_repo_dir: "/opt/fscrypt"

#
# email
#
# commit/tag of mu to build
mu_dir: "/opt/mu-src"
mu_rev: "v1.4.15"

# minio client
minio_client_version: "RELEASE.2022-04-07T21-43-27Z"

# github client (gh)
gh_version: "2.12.1"

#
# Database tools.
#
schemacrawler_version: "16.20.4"
