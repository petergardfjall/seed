- name: "git: update ~/.gitconfig"
  become: no # not as root
  shell: "~/dotfiles/setup-git-config.sh"
  changed_when: False # don't appear changed
  tags:
    - git
    - gitconfig

#
# Database clients
#
- name: "database clients: {{ packages }}"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  vars:
    packages:
      - mysql-client
      - postgresql-client
  tags:
    - database
    - mysql
    - postgres
    - apt

#
# docker
#

- name: "docker: install"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  vars:
    packages:
      - docker.io
      - docker-compose
  tags:
    - docker

- name: "docker: adding user to docker group"
  user:
    name: "{{ lookup('env', 'USER') }}"
    groups: docker
    append: yes
  tags:
    - docker

- name: "docker: enable"
  systemd:
    name: docker
    enabled: yes
    state: started
    masked: no
  tags:
    - docker

#
# VS Code
#

- name: "vscode: install"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  vars:
    packages:
      - code
  tags:
    - code

- name: "vscode: install extensions"
  become: no # not as root
  shell: "~/dotfiles/vscode/install-extensions.sh"
  changed_when: False # don't appear changed
  tags:
    - code

#
# Virtualization
#

- name: "virtualbox: install {{ packages }}"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  vars:
    packages:
      - virtualbox
      - vagrant
  tags:
    - vm
    - virtualbox

- name: "virtualbox: add {{ lookup('env', 'USER') }} to vboxusers group"
  user:
    name: "{{ lookup('env', 'USER') }}"
    groups: vboxusers
    append: yes
  tags:
    - vm
    - virtualbox

#
# Java
#

- name: "openjdk-11: install"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  vars:
    packages:
      - openjdk-11-jdk
      - openjdk-11-source
      - visualvm
  tags:
    - java
    - openjdk

- name: "openjdk-11: /opt/java symlink"
  file:
    src: /usr/lib/jvm/java-11-openjdk-amd64
    dest: /opt/java
    state: link
  tags:
    - java
    - openjdk

- name: "openjdk-11: /opt/bin/java symlink"
  file:
    src: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
    dest: /opt/bin/java
    state: link
  tags:
    - java
    - openjdk

- name: "maven: install"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  vars:
    packages:
      - maven
  tags:
    - java
    - maven

- name: "eclipse: create {{ eclipse_install_dir }}"
  file:
    path: "{{ eclipse_install_dir }}"
    state: directory
  tags:
    - java
    - eclipse

- name: "eclipse: download {{ eclipse_version }}"
  unarchive:
    src: "https://ftp.acc.umu.se/mirror/eclipse.org/technology/epp/downloads/release/{{ eclipse_version }}/R/eclipse-java-{{ eclipse_version }}-R-linux-gtk-x86_64.tar.gz"
    dest: "{{ eclipse_install_dir }}/"
    remote_src: yes
    creates: "{{ eclipse_install_dir }}/eclipse"
    extra_opts:
      - --transform
      - s/^eclipse\///
  tags:
    - java
    - eclipse

- name: "eclipse: /opt/bin/eclipse symlink"
  file:
    src: "{{ eclipse_install_dir }}/eclipse"
    dest: "/opt/bin/eclipse"
    state: link
  tags:
    - java
    - eclipse

#
# Python
#

- name: "python3: install"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  vars:
    packages:
      # needed for cryptography module
      - libssl-dev
      - libffi-dev
      # needed for bz2 module
      - libbz2-dev
      - python3
      - python3-dev
      - python3-pip
      - python3-venv
  tags:
    - python
    - python3

- name: "python3: install user pip modules"
  become: no # not as root
  pip:
    executable: pip3
    extra_args: --user # install under ~/.local
    name:
      - ipython
      # note: pipenv installs pip under ~/.local/bin. To avoid conflicts
      # with system pip, place ~/.local/bin early on PATH.
      - pipenv
      # jq-like tool for yaml
      - yq
      # markdown preprocessor with support for `!INCLUDE <file>` macro
      - MarkdownPP
  tags: python

# pyenv builds python from source, so it needs a few things to be installed.
# see https://github.com/pyenv/pyenv/wiki/common-build-problems#prerequisites
- name: "pyenv: prerequisites"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  vars:
    packages:
      - build-essential
      - libssl-dev
      - zlib1g-dev
      - libbz2-dev
      - libreadline-dev
      - libsqlite3-dev
      - llvm
      - libncurses5-dev
      - libncursesw5-dev
      - xz-utils
      - tk-dev
      - libxml2-dev
      - libxmlsec1-dev
      - libffi-dev
      - liblzma-dev
  tags:
    - python
    - pyenv

- name: "pyenv: install"
  become: no # not as root
  git:
    repo: https://github.com/pyenv/pyenv.git
    dest: "{{ '~/.pyenv' | expanduser }}"
    version: "{{ pyenv_version }}"
    clone: yes
    force: yes
    update: yes
  tags:
    - python
    - pyenv

- name: "pyenv: install python versions {{ pyenv_py_versions }}"
  become: no # not as root
  shell: "{{ '~/.pyenv/bin/pyenv' | expanduser }} install {{ item }}"
  args:
    creates: "{{ '~/.pyenv' | expanduser }}/versions/{{ item }}"
  with_items:
    - "{{ pyenv_py_versions }}"
  tags:
    - python
    - pyenv

- name: "pyenv-virtualenv: install"
  become: no # not as root
  git:
    repo: https://github.com/pyenv/pyenv-virtualenv.git
    dest: "{{ '~/.pyenv/plugins/pyenv-virtualenv' | expanduser }}"
    version: "{{ pyenv_virtualenv_version }}"
    clone: yes
    update: no
  tags:
    - python
    - pyenv

- name: "pyenv: set global interpreters {{ pyenv_global_versions }}"
  become: no
  shell: "{{ '~/.pyenv/bin/pyenv' | expanduser }} global {{ pyenv_global_versions }}"
  tags:
    - python
    - pyenv

- name: "ptvsd: install python DAP server"
  become: no # not as root
  pip:
    executable: pip3
    extra_args: --user # install under ~/.local
    name:
      - "ptvsd=={{ ptvsd_version }}"
      # either ptvsd or emacs dap-mode appears to require pytest
      - "pytest=={{ pytest_version }}"
  tags:
    - python
    - ptvsd
    - dap

#
# Go
#

- name: "go: check current version"
  command: /opt/bin/go version
  ignore_errors: yes
  changed_when: False # read-only: won't change machine state
  register: go_v
  tags: ["go"]

- name: "go: create {{ go_install_dir }}"
  file:
    path: "{{ go_install_dir }}"
    state: directory
  tags: ["go"]

- name: "go: download"
  unarchive:
    src: "https://dl.google.com/go/go{{ go_version }}.linux-amd64.tar.gz"
    dest: "{{ go_install_dir }}/"
    extra_opts: ["--strip-components=1"]
    remote_src: yes
  when: (go_v is failed) or (not go_version in go_v.stdout)
  tags: ["go"]

- name: "go: /opt/go -> {{ go_install_dir }} symlink"
  file:
    src: "{{ go_install_dir }}"
    dest: "/opt/go"
    force: yes
    state: link
  tags: ["go"]

- name: "go: /opt/bin/go symlink"
  file:
    src: "{{ go_install_dir }}/bin/go"
    dest: "/opt/bin/go"
    force: yes
    state: link
  when: (go_v is failed) or (not go_version in go_v.stdout)
  tags: ["go"]

- name: "go: create {{ go_path_dir }}"
  vars:
    go_path_dir: "{{ go_path | expanduser }}"
  become: no # not as root
  file:
    path: "{{ go_path_dir }}"
    state: directory
  tags: ["go"]

#
# Go tools
#

- name: "go: install modules"
  become: no # not as root
  command: "/opt/bin/go install {{ item }}"
  changed_when: False # don't view as changes in end result
  loop:
    # godoc, guru, gorename, etc
    - "golang.org/x/tools/...@latest"
    # locates symbol definitions in go code (needed by emacs go-mode)
    - "github.com/rogpeppe/godef@latest"
    # linter for Go
    - "golang.org/x/lint/golint@latest"
    # delve (debugger)
    - "github.com/go-delve/delve/cmd/dlv@{{ delve_version }}"
    # gopls language server
    - "golang.org/x/tools/gopls@{{ gopls_version }}"
    - "github.com/golangci/golangci-lint/cmd/golangci-lint@{{ golangci_lint_version }}"
    - "github.com/oklog/ulid/cmd/ulid@latest"
    # bundle static assets in Go binaries
    - "github.com/gobuffalo/packr/v2/packr2@latest"
    - "github.com/go-swagger/go-swagger/cmd/swagger@{{ go_swagger_version }}"
    # terraform language server (use by emacs' lsp-mode)
    - "github.com/hashicorp/terraform-ls@{{ tf_ls_version }}"
    - "github.com/fullstorydev/grpcurl/cmd/grpcurl@{{ grpcurl_version }}"
    # go diskusage: gdu
    - "github.com/dundee/gdu/v5/cmd/gdu@{{ gdu_version }}"
  tags:
    - go
    - go-modules
    - gopls
    - gdu

#
# protobuf compiler
#
- name: "protoc: check current version"
  shell: protoc --version | head -1
  ignore_errors: yes
  changed_when: False # read-only: won't change machine state
  register: protoc_v
  tags: ["go", "grpc", "protoc"]

- name: "protoc: download"
  become: no # not as root
  unarchive:
    src: "https://github.com/protocolbuffers/protobuf/releases/download/v{{ protoc_version }}/protoc-{{ protoc_version }}-linux-x86_64.zip"
    dest: "{{ '~/.local' | expanduser }}"
    remote_src: yes
  when: (protoc_v is failed) or (not protoc_version in protoc_v.stdout)
  tags:
    - go
    - grpc
    - protoc

- name: "go: protoc modules"
  become: no # not as root
  command: "/opt/bin/go install {{ item }}"
  changed_when: False # don't view as changes in end result
  loop:
    # grpc: protoc compiler plugins for Go
    - "google.golang.org/protobuf/cmd/protoc-gen-go@{{ protoc_gen_go_version }}"
    - "google.golang.org/grpc/cmd/protoc-gen-go-grpc@{{ protoc_grpc_gen_go_version }}"
  tags:
    - go
    - grpc
    - protoc

- name: "dep: check current version"
  command: /opt/bin/dep version
  ignore_errors: yes
  changed_when: False # read-only: won't change machine state
  register: dep_v
  tags: go

- name: "dep: download"
  get_url:
    url: "https://github.com/golang/dep/releases/download/v{{ go_dep_version }}/dep-linux-amd64"
    dest: /opt/bin/dep
    mode: 0755
    force: yes
  when: (dep_v is failed) or (not go_dep_version in dep_v.stdout)
  tags: go

#
# NodeJS
#

- name: "nodejs: install"
  apt:
    name: "{{ packages }}"
    state: latest
  vars:
    packages:
      - nodejs
      - yarn
  tags:
    - nodejs

- name: "nodejs: user-local installation of packages"
  copy:
    dest: "{{ '~/.npmrc' | expanduser }}"
    content: |
      prefix=${HOME}/.npm-packages
  tags:
    - nodejs

- name: "nodejs: install packages"
  become: no
  npm:
    name: "{{ item }}"
    # npm install -g <pkg>
    global: yes
  loop:
    - grunt-cli
    # recommended js/typescript language protocol server (user by emacs' lsp-mode)
    - typescript
    - "typescript-language-server@{{ typescript_lsp_server_version }}"
    # js/typescript language protocol server (used by emacs' lsp-mode)
    - javascript-typescript-langserver
    # html language protocol server (used by emacs' lsp-mode)
    - vscode-html-languageserver-bin
    # used by emacs' lsp-mode
    - bash-language-server
    # language server for Python
    - "pyright@{{ pyright_ls_version }}"
    # converter of markdown to pdf documents
    - md-to-pdf
    # an opinionated code-formatter (for JavaScript, JSX)
    # https://prettier.io/. Used in Emacs.
    - prettier
    # Generate data types and converters from JSON, JSON Schema to a multitude
    # of languages: Go, Python, Java, etc.
    - quicktype
  tags:
    - nodejs
    - npm

#
# Rust
#

- name: "rust: check if rustup installed"
  become: no
  shell: "~/.cargo/bin/rustup --version"
  ignore_errors: yes
  changed_when: False # read-only: won't change machine state
  register: check
  tags:
    - rust

# installs rustup, rustc, cargo and friends under ~/.cargo/bin/.
# be sure to add this directory to your PATH
- name: "rust: install rustup under ~/.cargo/bin/"
  become: no
  shell: "curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path"
  when: check.failed
  tags:
    - rust

- name: "rust: install rustup toolchains"
  become: no
  shell: "{{ item }}"
  changed_when: False # don't display as "changed"
  ignore_errors: yes # nightly sometimes fails when components are missing
  loop:
    - "~/.cargo/bin/rustup update"
    # install toolchain
    - "~/.cargo/bin/rustup install stable"
    # install toolchain
    - "~/.cargo/bin/rustup install nightly"
    - "~/.cargo/bin/rustup component add --toolchain=stable  rust-src rust-analysis rls rustfmt clippy"
    - "~/.cargo/bin/rustup component add --toolchain=nightly rust-src rust-analysis rls rustfmt clippy"
  tags:
    - rust

- name: "rust: install ripgrep"
  become: no
  shell: "{{ item }}"
  changed_when: False # don't display as "changed"
  loop:
    - "~/.cargo/bin/cargo install ripgrep --version {{ ripgrep_version }}"
  tags:
    - rust
    - ripgrep

# diffr: refined highlighting of changes in git diffs
- name: "rust: install diffr"
  become: no
  shell: "{{ item }}"
  changed_when: False # don't display as "changed"
  loop:
    - "~/.cargo/bin/cargo install diffr --version {{ diffr_version }}"
  tags:
    - rust
    - diffr

#
# C++
#

- name: "c++: install {{ packages }}"
  vars:
    packages:
      - clang
      - clang-format
      - cmake
      # man pages for c++ standard lib: man std::list, man std::unique_ptr
      - libstdc++-10-doc
      # /usr/share/cppreference/doc/html/en/index.html
      - cppreference-doc-en-html
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  tags:
    - c++

# clangd C++ language server
- name: "clangd: install"
  vars:
    packages:
      - "clangd"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
    update_cache: yes
  tags:
    - c++
    - clangd

- name: "cmake: install cmake_language_server"
  become: no # not as root
  pip:
    executable: pip
    extra_args: --user # install under ~/.local
    name:
      - cmake-language-server
  tags:
    - c++
    - cmake

#
# dotnet
#

- name: "dotnet: install {{ packages }}"
  vars:
    packages:
      - "dotnet-sdk-{{ dotnet_sdk_version }}"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
    update_cache: yes
  tags:
    - dotnet
    - python

#
# Python language server
#

- name: "ms-python-language-server: git clone"
  git:
    repo: https://github.com/Microsoft/python-language-server.git
    recursive: yes
    dest: /opt/python-language-server
    clone: yes
    update: no
  tags:
    - mspyls
    - python

- name: "ms-python-language-server: check if installed"
  # checks that the binary exists and that it has been built from
  # the expected release tag in the repository
  shell: |
    [ -f "/opt/bin/ms-python-language-server" ] && \
    cd /opt/python-language-server && \
    git_tag=$(git branch | grep \* | cut -d ' ' -f2)
    [ "${git_tag}" = "{{ python_language_server_version }}" ]
  ignore_errors: yes
  changed_when: False # read-only: won't change machine state
  register: check_mspyls
  tags:
    - mspyls
    - python

- name: "ms-python-language-server: build"
  shell: |
    # checkout release tag
    cd /opt/python-language-server && git fetch
    TAG={{ python_language_server_version }}
    git checkout -b ${TAG} tags/${TAG}
    # build
    cd src/LanguageServer/Impl
    dotnet build -c Release
    dotnet publish -c Release -r linux-x64
    chmod o+x /opt/python-language-server/output/bin/Release/linux-x64/publish/Microsoft.Python.LanguageServer
  when: check_mspyls.failed
  tags:
    - mspyls
    - python

- name: "ms-python-language-server: /opt/bin/ms-python-language-server symlink"
  file:
    src: "/opt/python-language-server/output/bin/Release/linux-x64/publish/Microsoft.Python.LanguageServer"
    dest: "/opt/bin/ms-python-language-server"
    force: yes
    state: link
  tags:
    - mspyls
    - python

#
# machine learning
#
- name: "miniconda: check if installed"
  stat:
    path: "{{ '~/miniconda3' | expanduser }}"
  register: miniconda
  tags:
    - miniconda
    - machine-learning
    - python

- name: "miniconda: download installer"
  become: "no" # not as root
  get_url:
    url: "https://repo.anaconda.com/miniconda/Miniconda3-{{ miniconda_py_version }}_{{ miniconda_version }}-Linux-x86_64.sh"
    checksum: "{{ miniconda_checksum }}"
    dest: "/tmp/Miniconda.sh"
  when: not miniconda.stat.exists
  tags:
    - miniconda
    - machine-learning
    - python

# installs conda under under `~/miniconda3`.
#
# To complete the installation, add an alias:
#   alias conda-activate='source <(~/miniconda3/bin/conda shell.bash hook)'
#
#   conda env list
#   conda create --name my-env python=3.8 -y
#   conda activate my-env
#
- name: "miniconda: install"
  become: "no" # not as root
  shell: "/bin/bash /tmp/Miniconda.sh -b"
  when: not miniconda.stat.exists
  tags:
    - miniconda
    - machine-learning
    - python

#
# Ruby
#
- name: "ruby: install {{ packages }}"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  vars:
    packages:
      - ruby
      - ruby-dev
  tags:
    - ruby

# install ruby language server
- name: "ruby: install solargraph language server"
  gem:
    name: solargraph
    version: "{{ solargraph_version }}"
    user_install: no # global
  tags:
    - ruby

#
# Miscellaneous tools
#

#
# Openstack
#

- name: "openstackclient: install"
  become: no # not as root
  pip:
    executable: pip3
    extra_args: --user # install under ~/.local
    name: openstackclient
  tags: openstack

#
# AWS
#

- name: "awscli: install"
  become: no # not as root
  pip:
    executable: pip3
    extra_args: --user # install under ~/.local
    name: awscli
  tags:
    - aws

#
# Azure
#

- name: "az: install"
  become: no # not as root
  pip:
    executable: pip3
    extra_args: --user # install under ~/.local
    name: azure-cli
  tags:
    - azure

#
# gcloud
#

- name: "gcloud: install"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  vars:
    packages:
      - google-cloud-sdk
  tags:
    - gcloud

- name: "cloud_sql_proxy: install"
  get_url:
    url: https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64
    dest: /opt/bin/cloud_sql_proxy
    mode: 0755
  tags:
    - gcloud
    - cloud_sql_proxy

#
# Terraform
#

- name: "terraform: check current version"
  shell: /opt/bin/terraform version | head -1
  ignore_errors: yes
  changed_when: False # read-only: won't change machine state
  register: tf_v
  tags: terraform

- name: "terraform: create {{ tf_install_dir }}"
  file:
    path: "{{ tf_install_dir }}"
    state: directory
  tags: terraform

- name: "terraform: download"
  unarchive:
    src: "https://releases.hashicorp.com/terraform/{{ tf_version }}/terraform_{{ tf_version }}_linux_amd64.zip"
    dest: "{{ tf_install_dir }}/"
    remote_src: yes
  when: (tf_v is failed) or (not tf_version in tf_v.stdout)
  tags: terraform

- name: "terraform: /opt/bin/terraform symlink"
  file:
    src: "{{ tf_install_dir }}/terraform"
    dest: "/opt/bin/terraform"
    force: yes
    state: link
  when: (tf_v is failed) or (not tf_version in tf_v.stdout)
  tags: terraform

#
# Kubernetes
#

- name: "kubectl: check current version"
  shell: "/opt/bin/kubectl version --client | grep v{{ kubectl_version }}"
  ignore_errors: yes
  changed_when: False # read-only: won't change machine state
  register: kubectl_v
  tags:
    - kubernetes
    - kubectl

- name: "kubectl: install"
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/v{{ kubectl_version }}/bin/linux/amd64/kubectl
    dest: /opt/bin/kubectl
    mode: 0755
    force: yes
  when: (kubectl_v is failed) or (kubectl_version not in kubectl_v.stdout)
  tags:
    - kubernetes
    - kubectl

- name: "create ~/.kube directory"
  become: no
  file:
    path: "{{ '~/.kube' | expanduser }}"
    state: directory
    mode: 0755
  tags:
    - kubernetes
    - kubectl

#
# helm2
#

- name: "helm2: check current version"
  shell: /opt/bin/helm2 version | head -1
  ignore_errors: yes
  changed_when: False # read-only: won't change machine state
  register: helm2_v
  tags:
    - helm
    - helm2
    - kubernetes

- name: "helm2: create {{ helm2_install_dir }}"
  file:
    path: "{{ helm2_install_dir }}"
    state: directory
  tags:
    - helm
    - helm2
    - kubernetes

- name: "helm2: install"
  unarchive:
    src: "https://get.helm.sh/helm-v{{ helm2_version }}-linux-amd64.tar.gz"
    dest: "{{ helm2_install_dir }}/"
    extra_opts: ["--strip-components=1"]
    remote_src: yes
  when: (helm2_v is failed) or (not helm2_version in helm2_v.stdout)
  tags:
    - helm
    - helm2
    - kubernetes

- name: "helm2: /opt/bin/helm2 symlink"
  file:
    src: "{{ helm2_install_dir }}/helm"
    dest: "/opt/bin/helm2"
    force: yes
    state: link
  tags:
    - helm
    - helm2
    - kubernetes

#
# helm3
#

- name: "helm3: check current version"
  shell: /opt/bin/helm3 version | head -1
  ignore_errors: yes
  changed_when: False # read-only: won't change machine state
  register: helm3_v
  tags:
    - helm
    - helm3
    - kubernetes

- name: "helm3: create {{ helm3_install_dir }}"
  file:
    path: "{{ helm3_install_dir }}"
    state: directory
  tags:
    - helm
    - helm3
    - kubernetes

- name: "helm3: install"
  unarchive:
    src: "https://get.helm.sh/helm-v{{ helm3_version }}-linux-amd64.tar.gz"
    dest: "{{ helm3_install_dir }}/"
    extra_opts: ["--strip-components=1"]
    remote_src: yes
  when: (helm3_v is failed) or (not helm3_version in helm3_v.stdout)
  tags:
    - helm
    - helm3
    - kubernetes

- name: "helm3: /opt/bin/helm3 symlink"
  file:
    src: "{{ helm3_install_dir }}/helm"
    dest: "/opt/bin/helm3"
    force: yes
    state: link
  tags:
    - helm
    - helm3
    - kubernetes

- name: "helm: /opt/bin/helm symlink"
  file:
    src: "{{ helm3_install_dir }}/helm"
    dest: "/opt/bin/helm"
    force: yes
    state: link
  tags:
    - helm
    - helm3
    - kubernetes

#
# helm secrets plugin
#

- name: "helm: check if secrets plugin is installed"
  become: no
  shell: "/opt/bin/helm secrets --help"
  ignore_errors: yes
  changed_when: False # read-only: won't change machine state
  register: secrets_installed
  tags:
    - helm
    - kubernetes

- name: "helm: install secrets plugin"
  become: no # not as root, stored under HELM_PLUGINS (see 'helm env')
  shell: "/opt/bin/helm plugin install https://github.com/jkroepke/helm-secrets --version={{ helm_secrets_version }}"
  when: secrets_installed.rc != 0
  tags:
    - helm
    - kubernetes

- name: "helm: check if diff plugin is installed"
  become: no
  shell: "/opt/bin/helm diff --help"
  ignore_errors: yes
  changed_when: False # read-only: won't change machine state
  register: diff_installed
  tags:
    - helm
    - kubernetes

- name: "helm: install diff plugin"
  become: no # not as root, stored under HELM_PLUGINS (see 'helm env')
  shell: "/opt/bin/helm plugin install https://github.com/databus23/helm-diff --version={{ helm_diff_version }}"
  when: diff_installed.rc != 0
  tags:
    - helm
    - kubernetes

#
# minikube
#

- name: "minikube: install"
  apt:
    deb: "https://github.com/kubernetes/minikube/releases/download/v{{ minikube_version }}/minikube_{{ minikube_version }}-0_amd64.deb"
  tags:
    - minikube
    - kubernetes

- name: "kubernetes: install go-based modules"
  become: no # not as root
  environment:
    GO111MODULE: "on"
  command: "/opt/bin/go install {{ item }}"
  changed_when: False # don't view as changes in end result
  loop:
    # kind: kubernetes-in-docker
    - "sigs.k8s.io/kind@{{ kind_version }}"
    # kustomize
    - "sigs.k8s.io/kustomize/kustomize/v3@v{{ kustomize_version }}"
  tags:
    - kubernetes
    - kind

#
# helmfile
#

- name: "helmfile: check current version"
  shell: /opt/bin/helmfile --version
  ignore_errors: yes
  changed_when: False # read-only: won't change machine state
  register: helmfile_v
  tags:
    - kubernetes
    - helmfile

- name: "helmfile: download"
  get_url:
    url: "https://github.com/roboll/helmfile/releases/download/v{{ helmfile_version }}/helmfile_linux_amd64"
    dest: "/opt/bin/helmfile"
    mode: "0755"
  when: (helmfile_v is failed) or (not helmfile_version in helmfile_v.stdout)
  tags:
    - kubernetes
    - helmfile

#
# k9s
#
- name: "k9s: check current version"
  command: "{{ k9s_install_dir }}/k9s version"
  ignore_errors: yes
  changed_when: False # read-only: won't change machine state
  register: k9s_v
  tags:
    - k9s
    - kubernetes

- name: "k9s: create {{ k9s_install_dir }}"
  file:
    path: "{{ k9s_install_dir }}"
    state: directory
  tags:
    - k9s
    - kubernetes

- name: "k9s: download"
  unarchive:
    src: "https://github.com/derailed/k9s/releases/download/{{ k9s_version }}/k9s_Linux_x86_64.tar.gz"
    dest: "{{ k9s_install_dir }}/"
    #extra_opts: ["--strip-components=1"]
    remote_src: yes
  when: (k9s_v is failed) or (not k9s_version in k9s_v.stdout)
  tags:
    - k9s
    - kubernetes

#
# Telepresence v2
#

- name: "telepresence v2: check current version"
  shell: "/opt/bin/{{ telepresence_v2_bin }} version | grep 'Client:'"
  ignore_errors: yes
  changed_when: False # read-only: won't change machine state
  register: telepresence_v
  tags:
    - kubernetes
    - telepresence

- name: "telepresence v2: download"
  get_url:
    url: "https://app.getambassador.io/download/tel2/linux/amd64/{{ telepresence_v2_version }}/telepresence"
    dest: "/opt/bin/{{ telepresence_v2_bin }}"
    mode: "0755"
    force: yes
  when: (telepresence_v is failed) or (not telepresence_v2_version in telepresence_v.stdout)
  tags:
    - kubernetes
    - telepresence

# TODO: get as module?
- name: "cfssl: install"
  apt:
    name: golang-cfssl
    state: latest
    install_recommends: yes

#
# tinyproxy
#
- name: "tinyproxy: clone git repo"
  git:
    repo: "https://github.com/tinyproxy/tinyproxy"
    recursive: yes
    dest: "/opt/tinyproxy"
    clone: yes
    update: no
    version: "{{ tinyproxy_version }}"
  tags:
    - tinyproxy

- name: "tinyproxy: build and install under /usr/local/bin/tinyproxy"
  shell: "./autogen.sh && ./configure --prefix=/usr/local && make && make install"
  args:
    chdir: "/opt/tinyproxy"
  tags:
    - tinyproxy

#
# minio client (mc)
#
- name: "minio: install mc"
  become: no # not as root
  command: "/opt/bin/go install github.com/minio/mc@{{ minio_client_version }}"
  changed_when: False
  tags:
    - minio

#
# GitHub cli (gh)
#
- name: "github cli (gh): install"
  apt:
    deb: "https://github.com/cli/cli/releases/download/v{{ gh_version }}/gh_{{ gh_version }}_linux_amd64.deb"
  tags:
    - github-cli
    - github
    - gh
