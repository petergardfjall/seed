#
# Database clients
#
- name: "database clients: {{ packages }}"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  vars:
    packages:
    - mysql-client
    - postgresql-client
  tags:
  - database
  - apt

#
# docker
#

- name: "docker: install"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  vars:
    packages:
    - docker.io
    - docker-compose
  tags:
  - docker

- name: "docker: adding user to docker group"
  user:
    name: "{{ lookup('env', 'USER') }}"
    groups: docker
    append: yes
  tags:
  - docker

- name: "docker: enable"
  systemd:
    name: docker
    enabled: yes
    state: started
    masked: no
  tags:
  - docker

#
# VS Code
#
- name: "apt key: vscode"
  apt_key:
    url: "https://packages.microsoft.com/keys/microsoft.asc"
    state: present
  tags:
  - apt-repos

- name: "apt repo: vscode"
  apt_repository:
    filename: "vscode"
    repo: "deb [arch=amd64] http://packages.microsoft.com/repos/vscode stable main"
    state: present
    update_cache: yes
  tags:
  - apt-repos

- name: "vscode: install"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  vars:
    packages:
    - code

- name: "vscode: install extensions"
  become: no   # not as root
  shell: "~/dotfiles/vscode/install-extensions.sh"
  changed_when: False  # don't appear changed

#
# Virtualization
#

- name: "virtualbox: install {{ packages }}"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  vars:
    packages:
    - virtualbox
    - vagrant
  tags:
  - vm
  - virtualbox

- name: "virtualbox: add {{ lookup('env', 'USER') }} to vboxusers group"
  user:
    name:  "{{ lookup('env', 'USER') }}"
    groups: vboxusers
    append: yes
  tags:
  - vm
  - virtualbox

- name: "kvm/libvirt: install {{ packages }}"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  vars:
    packages:
    - qemu-kvm
    - libvirt-daemon-system
    - libvirt-clients
    - bridge-utils
    - cpu-checker
    - virt-manager
  tags:
  - vm
  - kvm
  - libvirt

- name: "kvm: add {{ lookup('env', 'USER') }} to kvm group"
  user:
    name:  "{{ lookup('env', 'USER') }}"
    groups: kvm
    append: yes
  tags:
  - vm
  - kvm
  - libvirt

- name: "vagrant-libvirt: install dependencies {{ packages }}"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  vars:
    packages:
    - ruby-libvirt
    - qemu
    - ebtables
    - dnsmasq
    - libxslt-dev
    - libxml2-dev
    - libvirt-dev
    - zlib1g-dev
    - ruby-dev
  tags:
  - vm
  - kvm
  - libvirt

- name: "libvirt: make sure regular users can create vms"
  replace:
    path: /etc/libvirt/libvirtd.conf
    regexp:  'unix_sock_rw_perms = "0770"'
    replace: 'unix_sock_rw_perms = "0777"'
    backup: yes
  notify: "libvirtd: restart"
  tags:
  - vm
  - kvm
  - libvirt

- name: "vagrant libvirt plugin: check if installed"
  become: no   # not as root
  shell: vagrant plugin list | grep vagrant-libvirt
  ignore_errors: true
  changed_when: False  # read-only: won't change machine state
  register: vagrant_libvirt_check
  tags:
  - vm
  - kvm
  - libvirt

- name: "vagrant libvirt plugin: install"
  become: no   # not as root
  shell: vagrant plugin install vagrant-libvirt
  when: vagrant_libvirt_check.rc != 0
  tags:
  - vm
  - kvm
  - libvirt

- name: "packer: install"
  unarchive:
    src: "https://releases.hashicorp.com/packer/{{ packer_version }}/packer_{{ packer_version }}_linux_amd64.zip"
    dest: /opt/bin
    remote_src: yes
    creates: /opt/bin/packer
  tags:
  - packer
  - vm


#
# Java
#

- name: "openjdk-11: install"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  vars:
    packages:
    - openjdk-11-jdk
    - openjdk-11-source
    - visualvm
  tags:
  - java
  - openjdk

- name: "openjdk-11: /opt/java symlink"
  file:
    src:  /usr/lib/jvm/java-11-openjdk-amd64
    dest: /opt/java
    state: link
  tags:
  - java
  - openjdk

- name: "openjdk-11: /opt/bin/java symlink"
  file:
    src:  /usr/lib/jvm/java-11-openjdk-amd64/bin/java
    dest: /opt/bin/java
    state: link
  tags:
  - java
  - openjdk

- name: "maven: install"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  vars:
    packages:
    - maven
  tags:
  - java
  - maven

- name: "eclipse: create {{ eclipse_install_dir }}"
  file:
    path: "{{ eclipse_install_dir }}"
    state: directory
  tags:
  - java
  - eclipse

- name: "eclipse: download {{ eclipse_version }}"
  unarchive:
    src: "http://eclipse.mirror.garr.it/mirrors/eclipse//technology/epp/downloads/release/{{ eclipse_version }}/R/eclipse-java-{{ eclipse_version }}-R-linux-gtk-x86_64.tar.gz"
    dest: "{{ eclipse_install_dir }}/"
    remote_src: yes
    creates: "{{ eclipse_install_dir }}/eclipse"
    extra_opts:
    - --transform
    - s/^eclipse\///
  tags:
  - java
  - eclipse

- name: "eclipse: /opt/bin/eclipse symlink"
  file:
    src:  "{{ eclipse_install_dir }}/eclipse"
    dest: "/opt/bin/eclipse"
    state: link
  tags:
  - java
  - eclipse

- name: "intellij: install"
  snap:
    name:
    - intellij-idea-community
    channel: "stable"
    classic: "yes"
  tags:
  - java
  - intellij

#
# Python
#

- name: "python3: install"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  vars:
    packages:
    # needed for cryptography module
    - libssl-dev
    - libffi-dev
    - python3
    - python3-dev
    - python3-pip
    - python3-venv
  tags:
  - python
  - python3


- name: "python3: install user pip modules"
  become: no   # not as root
  pip:
    executable: pip3
    extra_args: --user  # install under ~/.local
    name:
    - ipython
    # note: pipenv installs pip under ~/.local/bin. To avoid conflicts
    # with system pip, place ~/.local/bin early on PATH.
    - pipenv
    # jq-like tool for yaml
    - yq
  tags: python


- name: "python: update-alternatives for /usr/bin/python"
  alternatives:
    name: python
    link: /usr/bin/python
    path: /usr/bin/python2
    priority: 20
  tags:
  - python
  - python2

- name: "python: update-alternatives for /usr/bin/python"
  alternatives:
    name: python
    link: /usr/bin/python
    path: /usr/bin/python3
    priority: 30
  tags:
  - python
  - python3

- name: "pyenv: install"
  become: no   # not as root
  git:
    repo: https://github.com/pyenv/pyenv.git
    dest: "{{ '~/.pyenv' | expanduser }}"
    version: "{{ pyenv_version }}"
    clone: yes
    update: no
  tags:
  - python
  - pyenv

- name: "pyenv: install python versions {{ pyenv_py_versions }}"
  become: no   # not as root
  shell: "pyenv install {{ item }}"
  args:
    creates: "{{ '~/.pyenv' | expanduser }}/versions/{{ item }}"
  with_items:
  - "{{ pyenv_py_versions }}"
  tags:
  - python
  - pyenv

#
# Go
#

- name: "go: check current version"
  command: /opt/bin/go version
  ignore_errors: yes
  changed_when: False  # read-only: won't change machine state
  register: go_v
  tags: ["go"]

- name: "go: create {{ go_install_dir }}"
  file:
    path: "{{ go_install_dir }}"
    state: directory
  tags: ["go"]

- name: "go: download"
  unarchive:
    src: "https://dl.google.com/go/go{{ go_version }}.linux-amd64.tar.gz"
    dest: "{{ go_install_dir }}/"
    extra_opts: ['--strip-components=1']
    remote_src: yes
  when: (go_v is failed) or (not go_version in go_v.stdout)
  tags: ["go"]

- name: "go: /opt/go -> {{ go_install_dir }} symlink"
  file:
    src: "{{ go_install_dir }}"
    dest: "/opt/go"
    force: yes
    state: link
  tags: ["go"]

- name: "go: /opt/bin/go symlink"
  file:
    src: "{{ go_install_dir }}/bin/go"
    dest: "/opt/bin/go"
    force: yes
    state: link
  when: (go_v is failed) or (not go_version in go_v.stdout)
  tags: ["go"]

- name: "go: create {{ go_path_dir }}"
  vars:
    go_path_dir: "{{ go_path | expanduser }}"
  become: no   # not as root
  file:
    path: "{{ go_path_dir }}"
    state: directory
  tags: ["go"]

#
# Go packages
#

- name: "go: install packages"
  become: no   # not as root
  environment:
    GOPATH: "{{ go_path | expanduser }}"
  command: "/opt/bin/go get {{ item }}"
  changed_when: False   # don't view as changes in end result
  loop:
    # godoc, guru, gorename, etc
    - "-u golang.org/x/tools/cmd/..."
    # Auto-completion daemon for go, which _can_ be used by emacs go-mode
    # (although the lsp-mode should make this redundant). This particular
    # gocode fork supports Go modules. May want to exchange for
    # github.com/nsf/gocode or github.com/mdempsky/gocode when modules are
    # supported.
    - "-u github.com/stamblerre/gocode"
    # locates symbol definitions in go code (needed by emacs go-mode)
    - "-u github.com/rogpeppe/godef"
    # linter for Go
    - "-u golang.org/x/lint/golint"
    # gRPC for Go
    - "-u google.golang.org/grpc"
    - "-u github.com/golang/protobuf/protoc-gen-go"
  tags: ["go"]

- name: "go: install modules"
  become: no   # not as root
  environment:
    GO111MODULE: "on"
  command: "/opt/bin/go get {{ item }}"
  changed_when: False   # don't view as changes in end result
  loop:
    # delve (debugger)
    - "github.com/go-delve/delve/cmd/dlv@v{{ delve_version }}"
    # gopls language server
    - "golang.org/x/tools/gopls@{{ gopls_version }}"
    - "github.com/golangci/golangci-lint/cmd/golangci-lint@{{ golangci_lint_version }}"
    - "github.com/oklog/ulid/cmd/ulid"
    # bundle static assets in Go binaries
    - "github.com/gobuffalo/packr/v2/packr2"
    - "github.com/go-swagger/go-swagger/cmd/swagger"
    # terraform language server (use by emacs' lsp-mode)
    - "github.com/juliosueiras/terraform-lsp@{{ tf_ls_version }}"
  tags:
  - go
  - go-modules
  - gopls

#
# protobuf compiler
#
- name: "protoc: check current version"
  shell: /opt/bin/protoc --version | head -1
  ignore_errors: yes
  changed_when: False  # read-only: won't change machine state
  register: protoc_v
  tags: ["go", "grpc", "protoc"]

- name: "protoc: create {{ protoc_install_dir }}"
  file:
    path: "{{ protoc_install_dir }}"
    state: directory
  tags: ["go", "grpc", "protoc"]

- name: "protoc: download"
  unarchive:
    src: "https://github.com/protocolbuffers/protobuf/releases/download/v{{ protoc_version }}/protoc-{{ protoc_version }}-linux-x86_64.zip"
    dest: "{{ protoc_install_dir }}"
    remote_src: yes
  when: (protoc_v is failed) or (not protoc_version in protoc_v.stdout)
  tags: ["go", "grpc", "protoc"]

- name: "protoc: /opt/bin/protoc symlink"
  file:
    src: "{{ protoc_install_dir }}/bin/protoc"
    dest: "/opt/bin/protoc"
    force: yes
    state: link
  when: (protoc_v is failed) or (not protoc_version in protoc_v.stdout)
  tags: ["go", "grpc", "protoc"]

- name: "dep: check current version"
  command: /opt/bin/dep version
  ignore_errors: yes
  changed_when: False  # read-only: won't change machine state
  register: dep_v
  tags: go

- name: "dep: download"
  get_url:
    url:  "https://github.com/golang/dep/releases/download/v{{ go_dep_version }}/dep-linux-amd64"
    dest: /opt/bin/dep
    mode: 0755
    force: yes
  when: (dep_v is failed) or (not go_dep_version in dep_v.stdout)
  tags: go

#
# NodeJS
#

- name: "nodejs: apt key"
  apt_key:
    url: "https://deb.nodesource.com/gpgkey/nodesource.gpg.key"
    state: present
  tags:
  - nodejs
  - apt-repos

- name: "nodejs: apt repo"
  apt_repository:
    filename: "nodejs"
    repo: "deb https://deb.nodesource.com/{{ nodejs_repo_version }} {{ ubuntu_release }} main"
    state: present
    update_cache: yes
  tags:
  - nodejs
  - apt-repos

- name: "nodejs yarn: apt key"
  apt_key:
    url: "https://dl.yarnpkg.com/debian/pubkey.gpg"
    state: present
  tags:
  - nodejs
  - apt-repos

- name: "nodejs yarn: apt repo"
  apt_repository:
    filename: "nodejs-yarn"
    repo: "deb https://dl.yarnpkg.com/debian/ stable main"
    state: present
    update_cache: yes
  tags:
  - nodejs
  - apt-repos

- name: "nodejs: apt repo src"
  apt_repository:
    filename: "nodejs"
    repo: "deb-src https://deb.nodesource.com/{{ nodejs_repo_version }} {{ ubuntu_release }} main"
    state: present
    update_cache: yes
  tags:
  - nodejs
  - apt-repos

- name: "nodejs: install"
  apt:
    name: "{{ packages }}"
    state: latest
  vars:
    packages:
    - nodejs
    - yarn
  tags:
  - nodejs

- name: "nodejs: user-local installation of packages"
  copy:
    dest: "{{ '~/.npmrc' | expanduser }}"
    content: |
      prefix=${HOME}/.npm-packages
  tags:
  - nodejs

- name: "nodejs: install packages"
  become: no
  npm:
    name: "{{ item }}"
    # npm install -g <pkg>
    global: yes
  loop:
  - grunt-cli
  # js/typescript language protocol server (user by emacs' lsp-mode)
  - javascript-typescript-langserver
  # html language protocol server (user by emacs' lsp-mode)
  - vscode-html-languageserver-bin
  # used by emacs' lsp-mode
  - bash-language-server
  tags:
  - nodejs
  - npm

#
# Rust
#

- name: "rust: check if rustup installed"
  become: no
  shell: "~/.cargo/bin/rustup --version"
  ignore_errors: yes
  changed_when: False  # read-only: won't change machine state
  register: check
  tags:
  - rust

# installs rustup, rustc, cargo and friends under ~/.cargo/bin/.
# be sure to add this directory to your PATH
- name: "rust: install rustup under ~/.cargo/bin/"
  become: no
  shell: "curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path"
  when: check.failed
  tags:
  - rust

- name: "rust: install rustup toolchains"
  become: no
  shell: "{{ item }}"
  changed_when: False  # don't display as "changed"
  ignore_errors: yes   # nightly sometimes fails when components are missing
  loop:
    - "~/.cargo/bin/rustup update"
    # install toolchain
    - "~/.cargo/bin/rustup install stable"
    # install toolchain
    - "~/.cargo/bin/rustup install nightly"
    - "~/.cargo/bin/rustup component add --toolchain=stable  rust-src rust-analysis rls rustfmt clippy"
    - "~/.cargo/bin/rustup component add --toolchain=nightly rust-src rust-analysis rls rustfmt clippy"
  tags:
  - rust

#
# C++
#

- name: "c++: install {{ packages }}"
  vars:
    packages:
    - clang
    - clang-format
    - cmake
    # man pages for c++ standard lib: man std::list, man std::unique_ptr
    - libstdc++-8-doc
    # /usr/share/cppreference/doc/html/en/index.html
    - cppreference-doc-en-html
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  tags:
  - c++
  - ccls

# clangd C++ language server
- name: "clangd: create /opt/clangd"
  file:
    path: "/opt/clangd"
    state: directory
  tags:
  - c++
  - clangd

- name: "clangd: download"
  unarchive:
    src: "https://github.com/clangd/clangd/releases/download/{{ clangd_version }}/clangd-linux-{{ clangd_version }}.zip"
    dest: "/opt/clangd"
    remote_src: yes
    creates: "/opt/clangd/clangd_{{ clangd_version }}/bin/clangd"
  tags:
  - c++
  - clangd

- name: "clangd: /opt/bin/clangd symlink"
  file:
    src:  "/opt/clangd/clangd_{{ clangd_version }}/bin/clangd"
    dest: "/opt/bin/clangd"
    force: yes
    state: link
  tags:
  - c++
  - clangd

- name: "cmake: install cmake_language_server"
  become: no   # not as root
  pip:
    executable: pip3
    extra_args: --user  # install under ~/.local
    name:
    - cmake-language-server
  tags:
  - c++
  - cmake

#
# dotnet core
#
- name: "get ubuntu release version"
  become: false
  shell: lsb_release -rs
  register: lsbrelease_rs
  changed_when: False  # read-only: won't change machine state
  tags:
  - dotnet
  - apt-repos

- name: "dotnet: register MS key, product repo, install dependencies"
  apt:
    deb: "https://packages.microsoft.com/config/ubuntu/{{ lsbrelease_rs.stdout }}/packages-microsoft-prod.deb"
  tags:
  - dotnet
  - apt-repos

- name: "dotnet: install {{ packages }}"
  vars:
    packages:
    - "dotnet-sdk-{{ dotnet_sdk_version }}"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
    update_cache: yes
  tags:
  - dotnet
  - python

#
# Python language server
#

- name: "ms-python-language-server: git clone"
  git:
    repo: https://github.com/Microsoft/python-language-server.git
    recursive: yes
    dest: /opt/python-language-server
    clone: yes
    update: no
  tags:
  - mspyls
  - python

- name: "ms-python-language-server: check if installed"
  # checks that the binary exists and that it has been built from
  # the expected release tag in the repository
  shell: |
    [ -f "/opt/bin/ms-python-language-server" ] && \
    cd /opt/python-language-server && \
    git_tag=$(git branch | grep \* | cut -d ' ' -f2)
    [ "${git_tag}" = "{{ python_language_server_version }}" ]
  ignore_errors: yes
  changed_when: False  # read-only: won't change machine state
  register: check_mspyls
  tags:
  - mspyls
  - python

- name: "ms-python-language-server: build"
  shell: |
    # checkout release tag
    cd /opt/python-language-server && git fetch
    TAG={{ python_language_server_version }}
    git checkout -b ${TAG} tags/${TAG}
    # build
    cd src/LanguageServer/Impl
    dotnet build -c Release
    dotnet publish -c Release -r linux-x64
    chmod o+x /opt/python-language-server/output/bin/Release/linux-x64/publish/Microsoft.Python.LanguageServer
  when: check_mspyls.failed
  tags:
  - mspyls
  - python

- name: "ms-python-language-server: /opt/bin/ms-python-language-server symlink"
  file:
    src: "/opt/python-language-server/output/bin/Release/linux-x64/publish/Microsoft.Python.LanguageServer"
    dest: "/opt/bin/ms-python-language-server"
    force: yes
    state: link
  tags:
  - mspyls
  - python

#
# Ruby
#
- name: "ruby: install {{ packages }}"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  vars:
    packages:
    - ruby
    - ruby-dev
  tags:
  - ruby

# install ruby language server
- name: "ruby: install solargraph language server"
  gem:
    name: solargraph
    state: latest
    user_install: no   # global
  tags:
  - ruby

#
# Miscellaneous tools
#

- name: "get kernel version"
  shell: uname -r
  register: uname_r
  changed_when: False  # read-only: won't change machine state
  tags:
  - bcc

# installs several eBPF-based tools under /usr/sbin/*-bpfcc
- name: "bcc: install {{ packages }}"
  vars:
    packages:
    - "bpfcc-tools"
    - "linux-headers-{{ uname_r.stdout }}"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  tags:
  - bcc

#
# Openstack
#

- name: "openstackclient: install"
  become: no   # not as root
  pip:
    executable: pip3
    extra_args: --user  # install under ~/.local
    name: openstackclient
  tags: openstack

#
# AWS
#

- name: "awscli: install"
  become: no   # not as root
  pip:
    executable: pip3
    extra_args: --user  # install under ~/.local
    name: awscli
  tags:
  - aws

#
# Azure
#

- name: "az: install"
  become: no   # not as root
  pip:
    executable: pip3
    extra_args: --user  # install under ~/.local
    name: azure-cli
  tags:
  - azure

#
# Google Cloud
#

- name: "apt key: gcloud"
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    keyring: /usr/share/keyrings/cloud.google.gpg
    state: present
  tags:
  - gcloud
  - apt-repos

- name: "apt repo: gcloud"
  apt_repository:
    filename: "gcloud"
    repo: "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main"
    state: present
    update_cache: yes
  tags:
  - gcloud
  - apt-repos

- name: "gcloud: install"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  vars:
    packages:
    - google-cloud-sdk
  tags:
  - gcloud

#
# Terraform
#

- name: "terraform: check current version"
  shell: /opt/bin/terraform version | head -1
  ignore_errors: yes
  changed_when: False  # read-only: won't change machine state
  register: tf_v
  tags: terraform

- name: "terraform: create {{ tf_install_dir }}"
  file:
    path: "{{ tf_install_dir }}"
    state: directory
  tags: terraform

- name: "terraform: download"
  unarchive:
    src: "https://releases.hashicorp.com/terraform/{{ tf_version }}/terraform_{{ tf_version }}_linux_amd64.zip"
    dest: "{{ tf_install_dir }}/"
    remote_src: yes
  when: (tf_v is failed) or (not tf_version in tf_v.stdout)
  tags: terraform

- name: "terraform: /opt/bin/terraform symlink"
  file:
    src: "{{ tf_install_dir }}/terraform"
    dest: "/opt/bin/terraform"
    force: yes
    state: link
  when: (tf_v is failed) or (not tf_version in tf_v.stdout)
  tags: terraform

#
# Kubernetes
#

- name: "kubectl: check current version"
  shell: "/opt/bin/kubectl version --client | grep v{{ kubectl_version }}"
  ignore_errors: yes
  changed_when: False  # read-only: won't change machine state
  register: kubectl_v
  tags: kubernetes

- name: "kubectl: install"
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/v{{ kubectl_version }}/bin/linux/amd64/kubectl
    dest: /opt/bin/kubectl
    mode: 0755
    force: yes
  when: (kubectl_v is failed) or (kubectl_version not in kubectl_v.stdout)
  tags: kubernetes

- name: "create ~/.kube directory"
  become: no
  file:
    path: "{{ '~/.kube' | expanduser }}"
    state: directory
    mode: 0755
  tags: kubernetes

- name: "helm: check current version"
  shell: /opt/bin/helm version | head -1
  ignore_errors: yes
  changed_when: False  # read-only: won't change machine state
  register: helm_v
  tags:
  - helm
  - kubernetes

- name: "helm: create {{ helm_install_dir }}"
  file:
    path: "{{ helm_install_dir }}"
    state: directory
  tags:
  - helm
  - kubernetes

- name: "helm: install"
  unarchive:
    src: "https://storage.googleapis.com/kubernetes-helm/helm-v{{ helm_version }}-linux-amd64.tar.gz"
    dest: "{{ helm_install_dir }}/"
    extra_opts: ['--strip-components=1']
    remote_src: yes
  when: (helm_v is failed) or (not helm_version in helm_v.stdout)
  tags:
  - helm
  - kubernetes

- name: "helm: /opt/bin/helm symlink"
  file:
    src: "{{ helm_install_dir }}/helm"
    dest: "/opt/bin/helm"
    force: yes
    state: link
  tags:
  - helm
  - kubernetes

- name: "minikube: install"
  apt:
    deb: "https://github.com/kubernetes/minikube/releases/download/v{{ minikube_version }}/minikube_{{ minikube_version }}.deb"
  tags:
  - minikube
  - kubernetes

- name: "kubernetes: install go-based modules"
  become: no   # not as root
  environment:
    GO111MODULE: "on"
  command: "/opt/bin/go get {{ item }}"
  changed_when: False   # don't view as changes in end result
  loop:
    # kind: kubernetes-in-docker
    - "sigs.k8s.io/kind@v{{ kind_version }}"
    # clusterawsadm
    - "sigs.k8s.io/cluster-api-provider-aws/cmd/clusterawsadm@v{{ clusterawsadm_version }}"
    # kustomize
    - "sigs.k8s.io/kustomize/kustomize/v3@v{{ kustomize_version }}"
  tags:
  - kubernetes

# TODO: get as module?
- name: "cfssl: install"
  apt:
    name: golang-cfssl
    state: latest
    install_recommends: yes
