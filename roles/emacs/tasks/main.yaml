- name: "git: checkout ~/.emacs.d/"
  become: no # not as root
  git:
    repo: "https://github.com/petergardfjall/.emacs.d.git"
    recursive: yes
    dest: "{{ '~/.emacs.d' | expanduser }}"
    clone: yes
    update: no
  tags:
    - dotfiles
    - emacs

- name: "git: set ssh remote for ~/.emacs.d"
  become: no
  git_config:
    name: remote.origin.url
    value: git@github.com:petergardfjall/.emacs.d.git
    scope: local
    repo: "{{ '~/.emacs.d' | expanduser }}"
  tags:
    - dotfiles
    - emacs

- name: "emacs: prerequisites: {{ packages }}"
  vars:
    packages:
      # see https://www.emacswiki.org/emacs/EmacsSnapshotAndDebian
      - texinfo
      - xorg-dev
      - libgtk-3-dev
      - libxpm-dev
      - libjpeg-dev
      - libgif-dev
      - libtiff5-dev
      - libm17n-dev
      - libpng-dev
      - librsvg2-dev
      - libotf-dev
      - libgnutls28-dev
      - libncurses5-dev
      - libjansson-dev
      - libharfbuzz-dev
      - libharfbuzz-bin
      # needed for native compilation (emacs 28+)
      - gcc-10
      - libgccjit0
      - libgccjit-10-dev
      # needed for tree-sitter integration (emacs 29+):
      # an incremental parsing system for programming tools.
      - libtree-sitter-dev
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  tags:
    - emacs

- name: "emacs: build tag/commit: {{ emacs_rev }}"
  shell: |
    build_dir={{ emacs_dir }} compile_flags={{ emacs_compile_flags }} {{ role_path }}/scripts/build-emacs.sh {{ emacs_rev | quote }}
  args:
    creates: "/opt/emacs-src/.BUILT_{{ emacs_rev }}"
  tags:
    - emacs

- name: "emacs: /usr/local/bin/emacs symlink"
  file:
    src: /opt/emacs-src/src/emacs
    dest: /usr/local/bin/emacs
    force: yes
    state: link
  tags:
    - emacs

- name: "install: {{ packages }}"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  vars:
    packages:
      # a faster grep for code (used by emacs ag package)
      - silversearcher-ag
      # extends global/gtags with support for F#, Haskell, ..
      # NOTE: set GTAGSLABEL=pygments-parser to make use of this backend.
      - python3-pygments
      # pandoc is used by emacs markdown-preview-mode
      - pandoc
  tags:
    - emacs
    - global

- name: "universal-ctags: install prerequisites: {{ packages }}"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  vars:
    packages:
      - python3-docutils
      - libseccomp-dev
      - libjansson-dev
      - libyaml-dev
      - libxml2-dev
  tags:
    - emacs
    - global

- name: "emacs vterm: install {{ packages }}"
  apt:
    name: "{{ packages }}"
    state: latest
    install_recommends: yes
  vars:
    packages:
      - libtool-bin
      - libvterm-dev
  tags:
    - emacs
    - vterm

#
# universal-ctags: tagging/indexing and searching of language objects in source
# code. Can be used as a plugin of GNU Global to supply support for more
# languages.
#

# universal-ctags extends language support for global/gtags
# NOTE: set GTAGSLABEL=new-ctags to make use of this backend.
- name: "universal-ctags: clone git repo"
  git:
    repo: "https://github.com/universal-ctags/ctags"
    recursive: yes
    dest: "/opt/universal-ctags"
    clone: yes
    update: yes
    version: "{{ universal_ctags_version }}"
  tags:
    - emacs
    - ctags
    - gtags
    - global

- name: "universal-ctags: check if /usr/local/bin/ctags needs rebuilding"
  shell: |
    # If the ctags binary is newer than the build marker, we must rebuild.
    # This is a sign that emacs has been rebuilt and overwritten
    # universal-ctags with its own ctags binary.
    binary_time="$(stat --format %Z /usr/local/bin/ctags)"
    build_time="$(stat --format %Z .BUILT_{{ universal_ctags_version }})"
    if [ "${binary_time}" -gt "${build_time}" ]; then
       rm -f .BUILT_{{ universal_ctags_version }}
    fi
  args:
    chdir: "/opt/universal-ctags"
  ignore_errors: yes
  tags:
    - emacs
    - ctags
    - gtags
    - global

- name: "universal-ctags: build and install under /usr/local/bin/ctags"
  shell: "./autogen.sh && ./configure --prefix=/usr/local && make && make install && touch /opt/universal-ctags/.BUILT_{{ universal_ctags_version }}"
  args:
    chdir: "/opt/universal-ctags"
    creates: "/opt/universal-ctags/.BUILT_{{ universal_ctags_version }}"
  tags:
    - emacs
    - ctags
    - gtags
    - global

#
# GNU global source code tagging (gtags) and querying (global)
#
- name: "global: download source code to /opt/global-{{ gnu_global_version }}"
  unarchive:
    src: "https://ftp.gnu.org/pub/gnu/global/global-{{ gnu_global_version }}.tar.gz"
    dest: "/opt"
    remote_src: yes
  tags:
    - emacs
    - gtags
    - global

# Build Global with `universal-ctags` as a plugin.
# See: https://www.gnu.org/software/global/manual/global.html#Plug_002din
- name: "global: build and install under /usr/local/bin/global"
  shell: "./configure --prefix=/usr/local --with-universal-ctags=/usr/local/bin/ctags && make && make install && touch /opt/global-{{ gnu_global_version }}/.BUILT_{{ gnu_global_version }}"
  args:
    chdir: "/opt/global-{{ gnu_global_version }}"
    creates: "/opt/global-{{ gnu_global_version }}/.BUILT_{{ gnu_global_version }}"
  tags:
    - emacs
    - gtags
    - global

- name: "global: place config under ~/.globalrc "
  become: no
  copy:
    src: files/globalrc
    dest: "{{ '~/.globalrc' | expanduser }}"
    mode: 0644
  tags:
    - emacs
    - ctags
    - gtags
    - global
